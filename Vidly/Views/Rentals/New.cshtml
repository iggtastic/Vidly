@model dynamic
@{
    ViewBag.Title = "New Rental Form";
}

<h2>New Rental Form</h2>

@* we're using AJAX with this form so we're just using normal form tags, not BeginForm *@

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            @* you can add client-side validation through jquery through use of the 'required' tag *@
            @* you can add custom validation through use of tags corresponding to names of
                 validator function calls. prefix those names with "data-rule-" *@
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>
    @* zen coding: use CSS syntax with web essentials plugin to build html markup! *@
    @* type this: div.form-group>label+input[type='text'].form-control *@
    @* press tab, and it turns into this: *@
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-validMovies="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    @* div.row>div.col-md-4.col-sm-4 *@
    <div class="row">
        <div class="col-md-4 col-sm-4">
            @* ul#movies.list-group *@
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>


    @* button.btn.btn-primary *@
    <button class="btn btn-primary">Submit</button>
</form>

@section scripts{

    @Scripts.Render("~/Bundles/jqueryval")
    <script>
        $(document).ready(function () {
            //client view model
            var vm = {
                movieIds:[]
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead(
            {
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                $("#movie").typeahead("val", "");

                vm.movieIds.push(movie.id);
            });

            // custom validators
            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId != 0;
            }, "Please select a valid customer"
            );

            $.validator.addMethod("validMovies", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie"
            );

            // client-side validation - do not allow form submit unless validation passes
            var validator = $("#newRental").validate({
                submitHandler: function () {
                    //e.preventDefault(); // this will enable AJAX submissions

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    }).done(function () {
                        //console.log("done");
                        toastr.success("Rentals successfully recorded");

                        // clear the form
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        // clear the view model
                        vm = { movieIds: [] };

                        // reset the form validator
                        validator.resetForm();

                    }).fail(function () {
                        toastr.error("An unexpected error occurred");
                    });

                    return false;
                }
            });
        });
    </script>
}